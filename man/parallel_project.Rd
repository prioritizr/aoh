% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel_project.R
\name{parallel_project}
\alias{parallel_project}
\title{Parallel project}
\usage{
parallel_project(
  x,
  y,
  method = "bilinear",
  buffer = 0,
  parallel_n_threads = 1,
  parallel_cluster = NULL,
  temp_dir = tempdir(),
  verbose = TRUE,
  ...
)
}
\arguments{
\item{x}{\code{\link[terra:rast]{terra::rast()}} Raster object with data needs to be
projected.}

\item{y}{\code{\link[terra:rast]{terra::rast()}} Raster object with spatial properties
that are used to define the output (i.e. spatial extent, resolution,
and coordinate reference system).}

\item{method}{\code{character} Name for projection method.
See \code{\link[terra:project]{terra::project()}} for available options.
Defaults to \code{"bilinear"}.}

\item{buffer}{\code{numeric} Buffer for clipping data.
Defaults to 0.}

\item{parallel_n_threads}{\code{integer} Number of computational threads to use
for data processing.
\strong{To reduce run time, it is strongly recommended to set this
parameter based on the number of available threads (see Examples below).}
Defaults to 1.}

\item{parallel_cluster}{\code{character} Name of strategy for
processing data in parallel. Available options are \code{"FORK"} and
\code{"PSOCK"}.
Defaults to \code{NULL} such that \code{"PSOCK"} is used on Microsoft
Windows operating systems, and \code{"FORK"} otherwise.
Defaults to 1.}

\item{temp_dir}{\code{character} Directory for saving temporary files.
Defaults to \code{\link[base:tempfile]{base::tempdir()}}.}

\item{verbose}{\code{logical} Should progress be displayed while processing data?
Defaults to \code{TRUE}.}

\item{...}{arguments passed to \code{\link[terra:crop]{terra::crop()}} and \code{\link[terra:project]{terra::project()}}.}
}
\value{
A \code{\link[terra:ext]{terra::ext()}} object.
}
\description{
Project a \code{\link[terra:rast]{terra::rast()}} object to a conform to the spatial properties
of another \code{\link[terra:rast]{terra::rast()}} object.
Additionally, parallel processing can be used to reduce run time.
}
\details{
This function speeds up data projection by manually excluding
data from \code{x} that do not overlap with the spatial extent of
\code{y} (accounting for a pre-specified buffer).
}
\examples{
# define raster object with data for projection
x <- rast(
  ncols = 40, nrows = 40,
  xmin = -110, xmax = -90, ymin = 40, ymax = 60,
  crs = "+proj=longlat +datum=WGS84"
)
x <- rast(lapply(seq_len(10), function(i) {
 init(x, "runif")
}))

# preview object
print(x)

# define raster object with spatial properties used to perform
# the projection processing
y <- rast(
  ncols = 94, nrows = 124,
  xmin = -944881, xmax = 935118, ymin = 4664377, ymax = 7144377,
  crs = "+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +datum=WGS84"
)
print(y)

# project data using a single thread
z <- parallel_project(x, y, parallel_n_threads = 1)
print(z)

# project data using multiple threads
\dontrun{
z2 <- parallel_project(x, y, parallel_n_threads = 1)
print(z2)
}
}
